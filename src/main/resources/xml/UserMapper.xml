<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.springbootmybatis2.mapper.UserMapper">
    <!--<cache readOnly="false" />-->
    <cache-ref namespace="com.example.springbootmybatis2.mapper.RoleMapper"/>
    <resultMap id="userMap" type="com.example.springbootmybatis2.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>
    <resultMap id="userRoleMap2" type="com.example.springbootmybatis2.model.SysUser" extends="userMap">
        <association property="role" columnPrefix="role_" javaType="com.example.springbootmybatis2.model.SysRole">
            <result property="id" column="id" />
            <result property="roleName" column="role_name"/>
            <result property="enabled" column="enabled" />
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
            <result property="createBy" column="create_by" jdbcType="VARCHAR"/>
        </association>
    </resultMap>

    <resultMap id="userAndRoleSelectMap" type="com.example.springbootmybatis2.model.SysUser" extends="userMap">
        <association property="role" javaType="com.example.springbootmybatis2.model.SysRole"
                     fetchType="lazy" select="com.example.springbootmybatis2.mapper.UserMapper.selectSysRoleByRoleId"
                     column="{roleId = role_id}">

        </association>

    </resultMap>

    <resultMap id="roleMap" type="com.example.springbootmybatis2.model.SysRole">
        <result property="id" column="id" />
        <result property="roleName" column="role_name"/>
        <result property="enabled" column="enabled"/>
        <association property="createInfo" javaType="com.example.springbootmybatis2.model.CreateInfo">
            <result property="createBy" column="create_by"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        </association>
     </resultMap>

    <resultMap id="userAndRoleListMap" type="com.example.springbootmybatis2.model.SysUser" extends="userMap">
        <collection property="roleList" columnPrefix="role_" resultMap="roleMap">

        </collection>
     </resultMap>
    <resultMap id="userAndRoleListMap2" type="com.example.springbootmybatis2.model.SysUser" extends="userMap">
        <collection property="roleList" columnPrefix="role_" resultMap="roleAndPrivilegeMap">

        </collection>
    </resultMap>
    <resultMap id="roleAndPrivilegeMap" type="com.example.springbootmybatis2.model.SysRole" extends="roleMap">
        <collection property="privilegeList" columnPrefix="privilege_" resultMap="privilegeMap">

        </collection>
    </resultMap>
    <resultMap id="privilegeMap" type="com.example.springbootmybatis2.model.SysPrivilege">
        <result property="id" column="id" />
        <result property="privilegeName" column="privilege_name" jdbcType="VARCHAR"/>
        <result property="privilegeUrl" column="privilege_url"/>
    </resultMap>



    <select id="selectAll" resultMap="userMap">
	    select id, 
	    	user_name userName, 
	        user_password userPassword,
	        user_email userEmail,
	        user_info userInfo,
	        head_img headImg,
	        create_time createTime
	    from sys_user
	</select>

    <select id="selectRolesByUserId" resultType="com.example.springbootmybatis2.model.SysRole">
	    select
			r.id,
			r.role_name roleName,
			r.enabled,
			r.create_by createBy,
			r.create_time createTime,
			u.user_name as "user.userName",
			u.user_email as "user.userEmail"
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
	    where u.id = #{userId}
	</select>


    <insert id="insert2" useGeneratedKeys="true" keyProperty="id" flushCache="false"
            timeout="2" statementType="PREPARED" parameterType="com.example.springbootmybatis2.model.SysUser">
        insert into sys_user(
        user_name, user_password,
        <if test="userEmail != null">
            <if test="userEmail != ''">
                user_email,
            </if>
        </if>
        user_info, head_img, create_time)
        values(
        #{userName}, #{userPassword},
        <if test="userEmail != null">
            <if test="userEmail != ''">
                #{userEmail},
            </if>
        </if>
        #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
    </insert>

    <insert id="insert3" parameterType="com.example.springbootmybatis2.model.SysUser">
        insert into sys_user(
        user_name, user_password,
        <if test="userEmail != null">
            <if test="userEmail != ''">
                user_email,
            </if>
        </if>
        user_info, head_img, create_time)
        values(
        #{userName}, #{userPassword},
        <if test="userEmail != null">
            <if test="userEmail != ''">
                #{userEmail},
            </if>
        </if>
        #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})

        <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

    </insert>

    <update id="update1" parameterType="com.example.springbootmybatis2.model.SysUser" timeout="2"
            flushCache="false">
		update sys_user
		set user_name = #{userName}
		where id = #{id}
	</update>


    <select id="selectRolesByUserAndRole" resultType="com.example.springbootmybatis2.model.SysRole">
	    select
			r.id,
			r.role_name roleName,
			r.enabled,
			r.create_by createBy,
			r.create_time createTime
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
	    where u.id = #{user1.id} and r.enabled = #{role1.enabled}
	</select>


    <select id="selectByUser" resultType="com.example.springbootmybatis2.model.SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        <where>
            <if test="userName !='' and userName !=null">
                and user_name =#{userName}
            </if>
            <if test="userEmail != null and userEmail !=''">
                and user_email =#{userEmail}
            </if>
        </where>

    </select>


    <update id="updateByUser">
        update sys_user
        <set>
            <if test="userName!=null">
                user_name = #{userName},
            </if>
            <if test="userEmail!=null">
                user_email =#{userEmail},
            </if>
            id = #{id},
        </set>
        <where>
            <if test="id !='' and id !=null">
                and id =#{id}
            </if>
        </where>

    </update>

    <select id="selectByIdOrUserName" resultType="com.example.springbootmybatis2.model.SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        where 1=1
        <choose>
            <when test="id !=null">
                and id =#{id}
            </when>
            <when test="userName != null">
                and user_name=#{userName}
            </when>
            <otherwise>
                limit 0
            </otherwise>

        </choose>

    </select>

    <insert id="insert5" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userName!=null">
                user_name,
            </if>
            <if test="userPassword !=null">
                user_password,
            </if>
            <if test="userEmail != null">
                <if test="userEmail != ''">
                    user_email,
                </if>
            </if>
            user_info, head_img, create_time,
        </trim>
        <trim prefix=" values(" suffix=")" suffixOverrides=",">
            <if test="userName!=null">
                #{userName},
            </if>
            <if test="userPassword !=null">
                #{userPassword},
            </if>
            <if test="userEmail != null">
                <if test="userEmail != ''">
                    #{userEmail},
                </if>
            </if>
            #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP},
        </trim>

    </insert>

    <select id="selectByIdList" resultType="com.example.springbootmybatis2.model.SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        where id in
        <foreach collection="array" open="(" close=")" separator="," item="idxx" index="i">
            #{idxx}
        </foreach>

    </select>
    <select id="selectByIdList2" resultType="com.example.springbootmybatis2.model.SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        where id in
        <foreach collection="list" open="(" close=")" separator="," item="idxx" index="i">
            #{idxx}
        </foreach>

    </select>

    <insert id="insertList" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            user_name,
            user_password,
            user_email,
            user_info, head_img, create_time,
        </trim>
        values
        <foreach collection="list" item="user" separator=",">
            <trim prefix=" (" suffix=")" suffixOverrides=",">
                #{user.userName},
                #{user.userPassword},
                #{user.userEmail},
                #{user.userInfo}, #{user.headImg, jdbcType=BLOB}, #{user.createTime, jdbcType=TIMESTAMP},
            </trim>

        </foreach>

    </insert>


    <select id="selectByUser2" databaseId="mysql" resultType="com.example.springbootmybatis2.model.SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        <where>
            <if test="userName !='' and userName !=null">
                and user_name =#{userName}
            </if>
            <if test="userEmail != null and userEmail !=''">
                and user_email =#{userEmail}
            </if>
        </where>

    </select>

    <select id="selectUserAndRoleById" resultType="com.example.springbootmybatis2.model.SysUser">
        select  u.id,
                u.user_name userName,
                u.user_email userEmail,
                r.id "role.id",
                r.role_name "role.roleName",
                r.enabled "role.enabled"
        from sys_user u
       inner join sys_user_role ur on u.id = ur.user_id
       inner join sys_role r on ur.role_id = r.id
       where u.id = #{id}

    </select>

    <select id="selectUserAndRoleById2" resultMap="userRoleMap2">
        select  u.id,
                u.user_name ,
                u.user_email ,
                r.role_name role_role_name,
                r.enabled role_enabled
        from sys_user u
       inner join sys_user_role ur on u.id = ur.user_id
       inner join sys_role r on ur.role_id = r.id
       where u.id = #{id}

    </select>
    <select id="selectUserAndRoleByIdSelect" resultMap="userAndRoleSelectMap">
        select u.id,
                u.user_name,
                u.user_email,
                ur.role_id
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        where u.id =#{id}
    </select>

    <select id="selectSysRoleByRoleId" resultMap="roleMap">
        select r.id,
                r.role_name,
                r.enabled,
                r.create_by,
                r.create_time
        from sys_role r
        where r.id =#{roleId}
    </select>

    <select id="selectAllUserAndRoles" resultMap="userAndRoleListMap">
        select u.id,
                u.user_name,
                u.user_password,
                u.user_email,
                r.id role_id,
                r.role_name role_role_name,
                r.enabled role_enabled,
                r.create_by role_create_by,
                r.create_time role_create_time
        from sys_user u
       inner join sys_user_role ur on u.id = ur.user_id
       inner join sys_role r on ur.role_id = r.id
    </select>

    <select id="selectAllUserAndRoles2" resultMap="userAndRoleListMap2">
        select u.id,
                u.user_name,
                u.user_password,
                u.user_email,
                r.id role_id,
                r.role_name role_role_name,
                r.enabled role_enabled,
                r.create_by  role_create_by,
                r.create_time role_create_time,
                p.id role_privilege_id,
                p.privilege_name  role_privilege_privilege_name,
                p.privilege_url role_privilege_privilege_url
        from sys_user u
       inner join sys_user_role ur on u.id = ur.user_id
       inner join sys_role r on ur.role_id = r.id
       inner join sys_role_privilege rp on r.id = rp.role_id
       inner join sys_privilege p on rp.privilege_id = p.id
    </select>
    <select id="selectAllUserAndRoles3" resultMap="userAndRoleListMap3">
        select u.id,
                u.user_name,
                u.user_password,
                u.user_email
        from sys_user u

    </select>
    <select id="selectRoleListByUserId" resultMap="roleAndPrivilegeMap3">
        select r.id,
                r.role_name,
                r.enabled,
                r.create_by,
                r.create_time
        from sys_role r
        inner join sys_user_role ur on r.id = ur.role_id
        where ur.user_id = #{userId}
    </select>
    <select id="selectPrivilegeListByRoleId" resultMap="privilegeMap">
        select p.id,
                p.privilege_name,
                p.privilege_url
        from sys_privilege p
        inner join sys_role_privilege rp on p.id = rp.privilege_id
        where rp.role_id =#{roleId}
    </select>
    <resultMap id="userAndRoleListMap3" type="com.example.springbootmybatis2.model.SysUser" extends="userMap">
        <collection property="roleList" fetchType="lazy"  select="com.example.springbootmybatis2.mapper.UserMapper.selectRoleListByUserId"
                column="{userId = id}" >

        </collection>
    </resultMap>
    <resultMap id="roleAndPrivilegeMap3" type="com.example.springbootmybatis2.model.SysRole" extends="roleMap">
        <collection property="privilegeList" fetchType="lazy" select="com.example.springbootmybatis2.mapper.UserMapper.selectPrivilegeListByRoleId"
                    column="{roleId=id}">

        </collection>

    </resultMap>
    <select id="selectRoleListByUserId2" resultMap="roleAndPrivilegeMapChoose">
        select r.id,
                r.role_name,
                r.enabled,
                r.create_by,
                r.create_time
        from sys_role r
        inner join sys_user_role ur on r.id = ur.role_id
        where ur.user_id = #{userId}
    </select>
    <resultMap id="roleAndPrivilegeMapChoose" type="com.example.springbootmybatis2.model.SysRole">
        <discriminator javaType="int" column="enabled">
            <case value="1" resultMap="roleAndPrivilegeMap3">
            </case>
            <case value="0" resultMap="roleMap">
            </case>
        </discriminator>
    </resultMap>
    
    <select id="selectUserInfoById" useCache="false" statementType="CALLABLE"
            parameterType="com.example.springbootmybatis2.model.SysUser">
        {call select_user_by_id(
            #{id, mode=IN,jdbcType=BIGINT},
            #{userName,mode=OUT,jdbcType=VARCHAR,javaType=String},
            #{userPassword,mode=OUT,jdbcType=VARCHAR},
            #{userEmail,mode=OUT,jdbcType=VARCHAR},
            #{userInfo,mode=OUT,jdbcType=VARCHAR},
            #{headImg,mode=OUT,jdbcType=BLOB,javaType=_byte[]},
            #{createTime,mode=OUT,jdbcType=TIMESTAMP,javaType=Date}
        )
        }
    </select>
    
    
    <select id="selectUserPage" useCache="false" statementType="CALLABLE" resultMap="userMap" >
        {
         call select_user_page(
            #{userName, mode=IN, jdbcType=VARCHAR},
            #{_offset,mode=IN, jdbcType=BIGINT},
            #{_limit,mode=IN,jdbcType=BIGINT},
            #{total,mode=OUT,jdbcType=BIGINT,javaType=int}
         )
        }
    </select>



    <select id="selectRolesByUserId2" flushCache="false"  resultType="com.example.springbootmybatis2.model.SysRole">
	    select
			r.id,
			r.role_name roleName,
			r.enabled,
			r.create_by createBy,
			r.create_time createTime,
			u.user_name as "user.userName",
			u.user_email as "user.userEmail"
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
	    where u.id = #{userId}
	</select>

    <select id="selectUserById" resultMap="userMap">
        select * from sys_user where id=#{id}
    </select>
    <select id="selectUserById2" resultMap="userMap">
        select * from sys_user where id=#{id}
    </select>
</mapper>